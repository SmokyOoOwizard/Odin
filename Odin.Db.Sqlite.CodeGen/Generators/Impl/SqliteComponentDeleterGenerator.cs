using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Odin.Abstractions.Components.Utils;
using Odin.CodeGen.Abstractions;

namespace Odin.Db.Sqlite.CodeGen.Generators.Impl;

[Generator]
public class SqliteComponentDeleterGenerator : AComponentIncrementalGenerator
{
    protected override void GenerateCode(
        GeneratorExecutionContext context,
        IEnumerable<INamedTypeSymbol> components
    )
    {
        var namespaceName = context.Compilation.AssemblyName;

        var tablesSql = components
                       .Select(c =>
                        {
                            var componentName = c.OriginalDefinition.ToDisplayString();

                            var tableName = componentName.Replace('.', '_');

                            var componentId = TypeComponentUtils.GetComponentTypeId(componentName);

                            var deleteSql = $@"
                    case {componentId}:
                            {{
                                if (old)
                                    sql = $@""DELETE FROM __old_{tableName} WHERE entityId = {{entityId}} AND contextId = {{contextId.MapToLong()}};"";
                                else
                                    sql = $@""DELETE FROM {tableName} WHERE entityId = {{entityId}} AND contextId = {{contextId.MapToLong()}};"";
                                break;
                            }}
";

                            return deleteSql;
                        }).ToArray();

        var deleteSwitchCases = string.Join("\n", tablesSql);

        var code = $@"
// <auto-generated/>

using System;
using Microsoft.Data.Sqlite;
using Odin.Db.Sqlite;
using Odin.Abstractions.Components.Utils;
using Odin.Abstractions.Entities;
using Odin.Utils;

namespace {namespaceName};

public class SqliteComponentDeleter : ISqliteComponentDeleter
{{
    public void Delete(SqliteConnection connection, ulong entityId, ulong contextId, ulong componentTypeId, bool old = false)
    {{
        var sql = string.Empty;

        switch (componentTypeId)
        {{
            {deleteSwitchCases}
            default:
                throw new Exception(""Unknown component type"");
        }}

        using var command = connection.CreateCommand();

        command.CommandText = sql;
        command.ExecuteNonQuery();
    }}
}}
";

        context.AddSource("SqliteComponentDeleter.g.cs", SourceText.From(code, Encoding.UTF8));
    }
}