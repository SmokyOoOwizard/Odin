using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Odin.CodeGen.Abstractions.Utils;
using Odin.Core.Abstractions.Components.Declarations;

namespace Odin.Core.CodeGen.Generators.Impl.Indexes.Fields;

[Generator]
public class ComponentFieldIndexGenerator : AComponentFieldIndexGenerator
{
    protected override void GenerateIndexDefinitions(
        GeneratorExecutionContext context,
        INamedTypeSymbol component,
        IEnumerable<ComponentFieldDeclaration> componentFieldDeclarations
    )
    {
        var namespaceName = component.ContainingNamespace.ToDisplayString();
        var componentName = ComponentUtils.GetComponentName(component);
        var indexName = $"{componentName}Index";

        var path = namespaceName.Replace('.', '/');
        var fullPath = $"{path}/{indexName}";

        var indexes = componentFieldDeclarations
           .Select(c =>
            {
                var name = c.Name;
                var type = c.GetFieldType();

                if (c.CollectionType != ECollectionType.None)
                {
                    return $@"
    public IEntitiesCollection {name}(params {type} values)
    {{
        return _index.{name}(values);
    }}

    public IEntitiesCollection {name}Contains(params {type} values)
    {{
        return _index.{name}Contains(values);
    }}

    public IEntitiesCollection {name}ContainsAny(params {type} values)
    {{
        return _index.{name}ContainsAny(values);
    }}
";
                }

                return $@"
    public IEntitiesCollection {name}({type} value)
    {{
        return _index.{name}(value);
    }}
";
            });

        var accessibility = component.DeclaredAccessibility.ToString();
        
        var indexCode = $@"
// <auto-generated/>

using System;
using Odin.Core.Indexes;
using Odin.Core.Entities.Collections;

namespace {namespaceName};

{accessibility.ToLower()} abstract class A{indexName} : IComponentFieldIndex
{{
}}

{accessibility.ToLower()} sealed class {indexName} : A{indexName}
{{
    private readonly I{indexName} _index;

    internal {indexName}(I{indexName} index)
    {{
        _index = index;
    }}

    public IEntitiesCollection GetEntities()
    {{
        throw new System.NotImplementedException();
    }}

    {string.Join("\n\t\t\t", indexes)}
}}
";

        context.AddSource($"{fullPath}.g.cs", SourceText.From(indexCode, Encoding.UTF8));
    }
}