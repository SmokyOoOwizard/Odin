using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Odin.Abstractions.Components.Declaration;
using Odin.CodeGen.Abstractions.Utils;

namespace Odin.Core.CodeGen.Generators.Impl.Indexes;

[Generator]
public class ComponentIndexGenerator : AComponentIndexGenerator
{
    protected override void GenerateIndexDefinitions(
        GeneratorExecutionContext context,
        INamedTypeSymbol component,
        IEnumerable<ComponentFieldDeclaration> componentFieldDeclarations
    )
    {
        var namespaceName = component.ContainingNamespace.ToDisplayString();
        var fullName = component.ToDisplayString();
        var componentName = ComponentUtils.GetComponentName(component);
        var indexName = $"{componentName}Index";
        

        var path = namespaceName.Replace('.', '/');
        var fullPath = $"{path}/{indexName}";

        var indexCode = $@"
// <auto-generated/>

using Odin.Abstractions.Entities.Indexes;
using Odin.Abstractions.Entities;

namespace {namespaceName};

public abstract class A{indexName} : IComponentIndex
{{
}}

public sealed class {indexName} : A{indexName}
{{
    private readonly I{indexName} _index;

    internal {indexName}(I{indexName} index)
    {{
        _index = index;
    }}

    public IEntitiesCollection GetEntities()
    {{
        return _index.GetEntities();
    }}

    public IEntitiesCollection GetEntities({fullName} component)
    {{
        return _index.GetEntities(component);
    }}
}}
";

        context.AddSource($"{fullPath}.g.cs", SourceText.From(indexCode, Encoding.UTF8));
    }
}