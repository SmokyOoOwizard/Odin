using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Odin.Abstractions.Components;
using Odin.Abstractions.Components.Utils;
using Odin.CodeGen.Abstractions;
using Odin.CodeGen.Abstractions.Utils;

namespace Odin.Core.CodeGen.Generators.Impl.Indexes;

[Generator]
public class ContextExtensionIndexGenerator : AComponentIncrementalGenerator
{
    private static readonly string IndexByFullName = typeof(IndexByAttribute).FullName!;

    protected override void GenerateCode(
        GeneratorExecutionContext context,
        IEnumerable<INamedTypeSymbol> components
    )
    {
        var indexedComponents = components.Where(c =>
        {
            var attributes = c.GetAttributes();

            var hasAttribute = attributes.Any(a => a.AttributeClass!.ToDisplayString() == IndexByFullName);
            
            var members = c.GetMembers();
            var membersAttributes = members.SelectMany(w => w.GetAttributes());

            var membersHasAttribute = membersAttributes.Any(a => a.AttributeClass!.ToDisplayString() == IndexByFullName);

            return hasAttribute || membersHasAttribute;
        });

        foreach (var indexedComponent in indexedComponents)
        {
            GenerateIndexDefinitions(context, indexedComponent);
        }
    }

    private void GenerateIndexDefinitions(
        GeneratorExecutionContext context,
        INamedTypeSymbol component
    )
    {
        var namespaceName = component.ContainingNamespace.ToDisplayString();
        var componentName = ComponentUtils.GetComponentName(component);
        var indexName = $"{componentName}Index";
        
        var fullName = component.OriginalDefinition.ToDisplayString();
        var componentId = TypeComponentUtils.GetComponentTypeId(fullName);

        var path = namespaceName.Replace('.', '/');
        
        var extensionName = $"{componentName}IndexExtensions";
        var extensionFullPath = $"{path}/{extensionName}";

        var extensionCode = $@"
// <auto-generated/>

using Odin.Abstractions.Entities.Indexes;
using Odin.Abstractions.Contexts;

namespace {namespaceName};

public static class {extensionName}
{{
    public static {indexName} Index<T>(this AEntityContext context) where T : A{indexName}
    {{
        if (typeof(T) != typeof({indexName}))
        {{
            throw new System.ArgumentException(nameof(T));
        }}

        var id = context.Id;
    
        var rep = EntityContextsRepository.GetRepository(id);
        if (rep == null)
            throw new System.InvalidOperationException();


        var index = (I{indexName})rep.GetIndex({componentId});

        return new {indexName}(index);
    }}
}}
";

        context.AddSource($"{extensionFullPath}.g.cs", SourceText.From(extensionCode, Encoding.UTF8));
    }
}