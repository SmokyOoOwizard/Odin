using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Odin.CodeGen.Abstractions;
using Odin.Core.CodeGen.Utils;

namespace Odin.Core.CodeGen.Generators.Impl.Components;

[Generator]
public class ComponentDeclarationGenerator : AComponentIncrementalGenerator
{
    protected override void GenerateCode(GeneratorExecutionContext context, IEnumerable<INamedTypeSymbol> components)
    {
        var namespaceName = context.Compilation.AssemblyName;

        var groupedComponents = components
           .Select(s =>
            {
                var fullName = s.OriginalDefinition.ToDisplayString();

                var members = s.GetMembers();

                var processedMembers = ComponentFieldCodeGen.GetCodeFieldDeclarations(members, fullName);

                var membersCode = processedMembers.Any() ? $"\n\t\t{string.Join("\n\t\t", processedMembers)}" : string.Empty;

                var code = $@"
        Component<{fullName}>()
            .WithName(""{fullName}"")
            .WithId(TypeComponentUtils.GetComponentTypeId<{fullName}>())
            .Size((ulong)Marshal.SizeOf<{fullName}>()){membersCode}
        .Build();
";

                return code;
            });

        var code = $@"
// <auto-generated/>

using System.Runtime.InteropServices;
using Odin.Core.Components.Declaration;
using Odin.Core.Components.Declaration.Builder.States;
using Odin.Core.Abstractions.Components.Declarations;
using Odin.Utils;

namespace {namespaceName};

internal class ComponentDeclarations : AComponentDeclarations
{{
    protected override void Configure()
    {{
{string.Join("", groupedComponents)}
    }}
}}
";

        context.AddSource("ComponentDeclarations.g.cs", SourceText.From(code, Encoding.UTF8));
    }
}