using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Odin.Component.CodeGen.Generators.Impl;

[Generator]
public class ComponentSerializationGenerator : AComponentIncrementalGenerator
{
    protected override void GenerateCode(
        SourceProductionContext context,
        Compilation compilation,
        ImmutableArray<StructDeclarationSyntax> structDeclarations
    )
    {
        var namespaceName = compilation.AssemblyName;

        foreach (var structDeclarationSyntax in structDeclarations)
        {
            var semanticModel = compilation.GetSemanticModel(structDeclarationSyntax.SyntaxTree);

            if (semanticModel.GetDeclaredSymbol(structDeclarationSyntax) is not INamedTypeSymbol structSymbol)
                continue;

            var componentName = structSymbol.Name;
            var componentFullName = structSymbol.OriginalDefinition.ToDisplayString();

            if (string.IsNullOrWhiteSpace(componentName))
                continue;

            var path = structSymbol.Locations.First().GetLineSpan().Path;

            var fileName = Path.GetFileNameWithoutExtension(path);
            
            var code = $@"
// <auto-generated/>

using System;
using System.Collections.Generic;
using Odin.Abstractions.Components;
using Odin.Abstractions.Components.Declaration;
using Odin.Abstractions.Serialization;

namespace {namespaceName};

public class {componentName}Serializer : IComponentSerializer<{componentFullName}>
{{
    public SerializedComponent Serialize({componentFullName} component)
    {{
        throw new NotImplementedException();
    }}

    public SerializedComponent[] Serialize({componentFullName}[] components)
    {{
        throw new NotImplementedException();
    }}

    public {componentFullName} Deserialize(SerializedComponent serializedComponent)
    {{
        throw new NotImplementedException();
    }}

    public {componentFullName}[] Deserialize(SerializedComponent[] serializedComponents)
    {{
        throw new NotImplementedException();
    }}
}}
";

            context.AddSource($"{fileName}Serializer.g.cs", SourceText.From(code, Encoding.UTF8));
        }
    }
}