using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Newtonsoft.Json;
using Odin.Abstractions.Collectors.Matcher;
using Odin.Abstractions.Components.Utils;
using Odin.CodeGen.Abstractions;

namespace Odin.Component.CodeGen.Generators.Impl.Matchers;

[Generator]
public class MatcherFilterInfoGenerator : AComponentMatcherIncrementalGenerator
{
    protected override void GenerateCode(
        GeneratorExecutionContext context,
        IEnumerable<(MethodDeclarationSyntax, FilterComponent)> matchers
    )
    {
        var namespaceName = context.Compilation.AssemblyName;

        var processedMatchers = matchers.Select(c =>
        {
            var json = JsonConvert.SerializeObject(c.Item2);
            var id = TypeComponentUtils.GetComponentTypeId(json);

            var parent = (ClassDeclarationSyntax)c.Item1.Parent!;

            var semanticModel = context.Compilation.GetSemanticModel(c.Item1.SyntaxTree);
            var typeSymbol = semanticModel.GetDeclaredSymbol(parent)!;

            return new
            {
                json,
                id,
                filter = c.Item2,
                syntax = c.Item1,
                symbol = typeSymbol
            };
        }).ToArray();
        
        var ids = processedMatchers
                 .Select(c =>
                  {
                      var fullName = c.symbol.ToDisplayString();

                      return $"case \"{fullName}\": return {c.id};";
                  })
                 .ToArray();
        
        var hasIds = processedMatchers
                 .Select(c => $"case {c.id}:")
                 .ToArray();
        
        var hasNames = processedMatchers
                    .Select(c =>
                       {
                           var fullName = c.symbol.ToDisplayString();
                           return $"case \"{fullName}\":";
                       })
                    .ToArray();
        
        var code = $@"
// <auto-generated/>

using System;
using System.Linq;
using Odin.Abstractions.Components.Utils;
using Odin.Abstractions.Entities;
using Odin.Abstractions.Collectors.Matcher;

namespace {namespaceName};
public partial class MatcherFilterRepository : IComponentMatcherRepository
{{
    public bool HasMatcher(ulong matcherId)
    {{
        switch (matcherId)
        {{
            {string.Join("\n\t\t\t", hasIds)}
                return true;
            default: 
                return false;
        }}
    }}

    public bool HasMatcher<T>() where T : {nameof(AComponentMatcher)}
    {{
        var fullName = typeof(T).FullName;
        switch (fullName)
        {{
            {string.Join("\n\t\t\t", hasNames)}
                return true;
            default: 
                return false;
        }}
    }}

    public ulong GetMatcherId<T>() where T : {nameof(AComponentMatcher)}
    {{
        var fullName = typeof(T).FullName;
        switch (fullName)
        {{
            {string.Join("\n\t\t\t", ids)}
            default: 
                throw new Exception($""Matcher with type {{typeof(T).Name}} not found"");
        }}
    }}

    public string GetMatcherJson(ulong matcherId)
    {{
        switch (matcherId)
        {{
            {string.Join("\n\t\t\t", processedMatchers.Select(c => $"case {c.id}: return \"{c.json.Replace("\"", "\\\"")}\";"))}
            default: 
                throw new Exception($""Matcher with id {{matcherId}} not found"");
        }}
    }}
}}
";

        context.AddSource("MatcherFilterRepository.Info.g.cs", SourceText.From(code, Encoding.UTF8));
    }
}