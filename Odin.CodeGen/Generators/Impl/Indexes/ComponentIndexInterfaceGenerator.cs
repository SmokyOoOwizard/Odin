using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Odin.Abstractions.Components.Declaration;
using Odin.CodeGen.Abstractions.Utils;

namespace Odin.Component.CodeGen.Generators.Impl.Indexes;

[Generator]
public class ComponentIndexInterfaceGenerator : AComponentIndexGenerator
{
    protected override void GenerateIndexDefinitions(
        GeneratorExecutionContext context,
        INamedTypeSymbol component,
        IEnumerable<ComponentFieldDeclaration> componentFieldDeclarations
    )
    {
        var namespaceName = component.ContainingNamespace.ToDisplayString();
        var fullName = component.ToDisplayString();
        var componentName = ComponentUtils.GetComponentName(component);
        var indexName = $"{componentName}Index";


        var path = namespaceName.Replace('.', '/');
        var fullPath = $"{path}/{indexName}";

        var @params = component
                     .GetMembers()
                     .Where(c => c is IFieldSymbol)
                     .Select(m =>
                      {
                          var field = (m as IFieldSymbol)!;
                          return $"{field.Type.ToDisplayString()} {field.Name}";
                      })
                     .ToArray();

        var indexCode = $@"
// <auto-generated/>

using Odin.Abstractions.Entities.Indexes;
using Odin.Abstractions.Entities;

namespace {namespaceName};

public interface I{indexName} : IIndexModule<{fullName}>
{{
    IEntitiesCollection GetEntities({string.Join(", ", @params)});
}}
";

        context.AddSource($"{fullPath}.g.cs", SourceText.From(indexCode, Encoding.UTF8));
    }
}