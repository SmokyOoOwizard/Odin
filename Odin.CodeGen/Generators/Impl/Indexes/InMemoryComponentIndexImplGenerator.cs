using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Odin.Abstractions.Components.Declaration;
using Odin.Abstractions.Components.Utils;
using Odin.CodeGen.Abstractions.Utils;

namespace Odin.Component.CodeGen.Generators.Impl.Indexes;

[Generator]
public class InMemoryComponentIndexImplGenerator : AComponentIndexGenerator
{
    protected override void GenerateIndexDefinitions(
        GeneratorExecutionContext context,
        INamedTypeSymbol component,
        IEnumerable<ComponentFieldDeclaration> componentFieldDeclarations
    )
    {
        var namespaceName = component.ContainingNamespace.ToDisplayString();
        var fullName = component.OriginalDefinition.ToDisplayString();
        var componentName = ComponentUtils.GetComponentName(component);
        var indexModuleName = $"InMemory{componentName}IndexModule";
        var indexName = $"I{componentName}Index";

        var componentId = TypeComponentUtils.GetComponentTypeId(fullName);
        
        var path = namespaceName.Replace('.', '/');
        var fullPath = $"{path}/{indexModuleName}";

        var indexCode = $@"
// <auto-generated/>

using Odin.Abstractions.Entities.Indexes;
using Odin.Abstractions.Entities;
using OdinSdk.Entities;
using System.Collections.Generic;
using System.Linq;

namespace {namespaceName};

public sealed class {indexModuleName} : {indexName}, IInMemoryIndexModule
{{
    private readonly Dictionary<{fullName}, HashSet<EntityId>> _componentsToId = new();
    private readonly Dictionary<EntityId, {fullName}> _idsToComponent = new();

    private IReadOnlyEntityRepository _components;
    private IEntityComponentsRepository _changes;

    public void SetRepositories(IReadOnlyEntityRepository components, IEntityComponentsRepository changes)
    {{
        _components = components;
        _changes = changes;
    }}

    public ulong GetComponentTypeId()
    {{
        return {componentId}ul;
    }}

    public void Add(ComponentWrapper component, EntityId id)
    {{
        if (component.TypeId != {componentId})
            return;

        if (_idsToComponent.TryGetValue(id, out var oldComponent))
        {{
            if (_componentsToId.TryGetValue(oldComponent, out var oldIds))
                oldIds.Remove(id);
            if (oldIds.Count == 0)
                _componentsToId.Remove(oldComponent);
        }}

        var realComponent = ({fullName})component.Component;

        if (!_componentsToId.TryGetValue(realComponent, out var ids))
            _componentsToId[realComponent] = ids = new();

        ids.Add(id);
        _idsToComponent[id] = realComponent;
    }}

    public void Remove(EntityId id)
    {{
        if (_idsToComponent.TryGetValue(id, out var component))
        {{
            if (_componentsToId.TryGetValue(component, out var ids))
                ids.Remove(id);

            if (ids.Count == 0)
                _componentsToId.Remove(component);
            _idsToComponent.Remove(id);
        }}
    }}

    public IEntitiesCollection GetEntities()
    {{
        var entities = _idsToComponent.Keys.Select(id => new Entity(id, _components, _changes)).ToArray();

        return new InMemoryEntitiesCollection(entities);
    }}

    public IEntitiesCollection GetEntities({fullName} component)
    {{
        if (!_componentsToId.TryGetValue(component, out var ids))
            return new InMemoryEntitiesCollection();

        var entities = ids.Select(id => new Entity(id, _components, _changes)).ToArray();

        return new InMemoryEntitiesCollection(entities);
    }}
}}
";

        context.AddSource($"{fullPath}.g.cs", SourceText.From(indexCode, Encoding.UTF8));
    }
}